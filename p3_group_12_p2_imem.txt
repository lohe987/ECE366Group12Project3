# Program 2 by Group12 for Project3
# 28, Oct, 2018

10000001              # init R0, 1
01110100              # inc R0
01110100              # inc R0              # R0 = 3
00010100              # ld R1, R0           # R1 = Target Pattern
00001010              # init R2,6
11110110              # inc R2
11110110              # inc R2              # R2 = 8, Memory Pointer
00000011              # init R0, 108        # R1 = 108, exit memory address
GetScore:             # jpu2 MUX[01] = 8 (instruction mem address)
00011110              # ld R3, R2           # R3 = Current pattern
11111111              # score               # calculate the number of same bits between R1 and R3
00101110              # st R3, R2
11110110              # inc R2
11010001              # jpu2 R2, R0, 8
10000010              # init R0, 6
01110100              # inc R0
01110100              # inc R0              # R0 = 8, Memory Pointer
10000100              # init R1, 0          # the best score
10001000              # init R2, 0          # the best score counter
FindBest:             # jpu1 MUX[11] = 18 (instruction mem address)
10011100              # ld R3, R0
11011110              # jpu2 R3, R1, 27     # if (pointed score) < (best score), jump to LessThanBest
01001110              # jpu1 R1, R3, 24     # if (best score) < (curretn score), jump to BiggerThanBest
11110110              # inc R2              # pc arrives here -> R1 = R3
00001100              # init R3, 0
01011010              # jpu2 R3, R0, 27     # R3=0 MUST < R0, jump condition is met, jump to LessThanBest
BiggerThanBest:       # jpu1 MUX[10] = 24 (instruction mem address)
10000100              # init R1, 0
10110111              # add R1, R3          # reset best score
00001001              # init R2, 1          # reset counter = 1
LessThanBest:         # jpu2 MUX[11] = 27 (instruction mem address)
01110100              # inc R0
00001111              # init R3, 108
01000111              # jpu1 R0, R3, 18     # if (address pointer) < 108, jump back; else go out
Out:
10000001              # init R0, 1
01110100              # inc R0
01110100              # inc R0
01110100              # inc R0              # RO = 4
00100100              # st R1, R0           # store the best score
01110100              # inc R0              # R0 = 5
00101000              # st R2, R0           # store the counter
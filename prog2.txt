# Program 2 by Group12 for Project3
# 28, Oct, 2018

init R0, 1
inc R0
inc R0         # R0 = 3
ld R1, R0      # R1 = Target Pattern

init R2,6
inc R2
inc R2         # R2 = 8, Memory Pointer

init R0, 108   # R1 = 108, exit memory address

GetScore:
ld R3, R2      # R3 = Current pattern
score
st R3, R2
inc R2
jpu2 R2, R0, GetScore

init R0, 6
inc R0
inc R0         # R0 = 8, Memory Pointer
init R1, 0     # the best score
init R2, 0     # the best score counter

FindBest:
ld R3, R0
jpu2 R3, R1, LessThanBest    # if (pointed score) < (best score), jump to LessThanBest
jpu1 R1, R3, BiggerThanBest  # if (best score) < (curretn score), jump to BiggerThanBest

inc R2                      # pc arrives here -> R1 = R3
init R3, 0  
jpu2 R3, R0, LessThanBest    # R3=0 MUST < R0, jump condition is met, jump to LessThanBest 

BiggerThanBest:
init R1, 0
add R1, R3    # reset best score
init R2, 1    # reset counter = 1

LessThanBest:
inc R0
init R3, 108
jpu1 R0, R3, FindBest        # if (address pointer) < 108, jump back; else go out

Out:
init R0, 1
inc R0
inc R0
inc R0        # RO = 4
st R1, R0     # store the best score
inc R0.       # R0 = 5
st R2, R0     # store the counter








